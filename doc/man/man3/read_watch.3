.TH READ_WATCH 3 "January 3, 1997" "StopWatch 1.0" "STOPWATCH PROCEDURES"
.PD 0.0v


.SH NAME
read_watch - reads the values from a StopWatch watch

.SH SYNOPSIS
subroutine
.BI "read_watch" "(read_result, watch, clock, err)"


.IP
real, intent(OUT) ::  read_result
.IP OR
real, pointer ::  read_result(:)
.IP OR
real, pointer ::  read_result(:,:)


.IP
type (watchtype), intent(IN) ::  watch
.IP OR
type (watchtype), intent(IN) ::  watch(:)


.IP
character(len=*), optional, intent(IN) ::  clock
.IP OR
character(len=*), intent(IN) ::  clock(:)


.IP
integer, optional, intent(OUT) ::  err


.SH DESCRIPTION
Returns the value of the specified clocks from the
specified watches in
.I read_result
.
One or more watches must be specified.  The argument
.I watch
can be a single variable of type
.I watchtype
(see
.BR "stopwatch" "(3))"
to read one watch, or an array of type
.I watchtype
to read several watches.
.I watch
can not be a
.I watchgroup
because there is no natural order of the watches in the
group to use in constructing an array for the result.

The optional argument
.I clock
specifies which clocks to read from the specified
watch(es).  If omitted, the current default clocks (see
.BR "option_stopwatch" "(3))"
are read.  If present,
.I clock
must be a character string containing 'cpu', 'user',
\'sys', or 'wall', or an array of such character
strings.

The type of
.I read_result
must agree with the form of the arguments
.I watch
and
.I clock:


If
.I watch
is a scalar and
.I clock
is a scalar, then
.I read_result
must be a real scalar.

If
.I watch
is an array and
.I clock
is a scalar, then
.I read_result
must be a pointer to a rank 1 real array.  The ith
entry of the result is the specified clock value on
.I watch(i).


If
.I watch
is a scalar and
.I clock
is either an array or omitted, then
.I read_result
must be a pointer to a rank 1 real array.  The ith
entry of the result is the value in
.I clock(i)
on the specified
.I watch.
In the case that
.I clock
is omitted, note that the default clocks specify the
contents of the result, and the default clocks can be
determined using
.BR "inquiry_stopwatch" "(3)."


If
.I watch
is an array and
.I clock
is either an array or omitted, then
.I read_result
must be a pointer to a rank 2 real array.  The (i,j)th
entry of the result is the value in
.I clock(j)
on
.I watch(i).


If
.I read_result
is a pointer to an array, it will be allocated by
.B read_watch
, and should be deallocated after use to avoid memory
leakage.

.SH DIAGNOSTICS
If present, the optional intent OUT integer argument
.I err
returns a status code.  The code is the sum of the
values listed below.

An error message will be printed to a specified I/O
unit (unit 6 by default) if
.I print_errors
is TRUE (default is TRUE). The error message contains
more detail about the cause of the error than can be
obtained from just the status code, so you should set
.I print_errors
to TRUE if you have trouble determining the cause of
the error.

If
.I abort_errors
is TRUE (default is FALSE), the program will terminate
on an error condition.  Otherwise, the program will
continue execution but the watch(es) will not be read.

See
.BR "option_stopwatch" "(3)"
for further information on
.I print_errors, abort_errors
and I/O units.

The relevant status codes and messages are:


.IP 0
No errors; execution successful.


.IP 1
Watch needs to be created.  This error occurs if you
attempt to read a watch that has been destroyed.  The
watch must first be created again.  See also the
comment about watches that have never been created in
the BUGS section.


.IP 4
Watch is in an unknown state.  This occurs if StopWatch
does not recognize the state (running, stopped, etc.)
that the watch is in.  This error should not occur, and
indicates an internal bug in StopWatch.


.IP 8
Invalid clock type.  This occurs if
.I clock
is present and one of the specified clocks is not
supported by the implementation.  See
.BR "inquiry_stopwatch" "(3)"
to determine what clocks are available.


.IP 512
Failed to allocate required memory.  When
.B read_watch
is called with an array or group of watches, temporary
memory is allocated.  This error occurs if the Fortran
.B allocate
statement returns a nonzero status indicating that
memory could not be allocated.  Avoid memory leaks by
always destroying watches and groups before recreating
them, and destroying local variable watches and groups
before returning from a subroutine.


.IP 1024
Error occurred while deallocating memory.  This error
occurs if the Fortran
.B deallocate
statement returns a nonzero status while deallocating
temporary memory used for an array or group of watches.
The watches are read, but be aware that other problems
could develop as a result of the deallocate error.


.LP

In addition to the run time diagnostics generated by
StopWatch, the following problems may arise:


.IP o
In Fortran 90, the character strings in an array
constructor must all have the same length.  Pad three
letter clock names with a blank on the right to make a
four character string, for example, 'cpu '.


.SH EXAMPLES
type (watchtype) w1, w2(3)
.br
real x
.br
real, pointer ::  y(:), z(:,:)
.br
integer errcode

call read_watch(x, w1, 'user')
.br
call read_watch(y, w1, err=errcode)
.br
call read_watch(z, w2, (/'cpu ', 'wall'/), errcode)
.br
deallocate(y, z)

The first call reads the user clock on a single watch.
The second call reads the default clocks on a single
watch and returns a status code.  y is allocated with
dimension equal to the number of default clocks.  The
third call reads the cpu and wall clocks from three
watches given as an array and returns a status code.
The deallocate statement frees the memory allocated in
.I read_watch
.

.SH BUGS
It cannot be determined whether or not a watch variable
or watch group has been created (passed as an argument
to
.B create_watch
or
.BR "create_watchgroup" ")."
If a watch or watch group that has never been created
is passed into
.B read_watch,
it might generate a Fortran error due to passing a
pointer with undefined association status to the
Fortran intrinsic function
.B associated.
However, some compilers will allow this as an extension
to the Fortran 90 standard and recognize that the
pointer is not associated, in which case the ``Watch
needs to be created'' error message is generated.

.SH AUTHOR
William F. Mitchell, william.mitchell@nist.gov
.br
National Institute of Standards and Technology


.SH SEE ALSO
stopwatch(3), create_watchgroup(3), create_watch(3),
destroy_watchgroup(3), destroy_watch(3),
end_pause_watch(3), inquiry_stopwatch(3),
join_watchgroup(3), leave_watchgroup(3),
option_stopwatch(3), pause_watch(3), print_watch(3),
reset_watch(3), start_watch(3), stop_watch(3)
