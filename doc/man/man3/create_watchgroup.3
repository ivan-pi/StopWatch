.TH CREATE_WATCHGROUP 3 "January 3, 1997" "StopWatch 1.0" "STOPWATCH PROCEDURES"
.PD 0.0v


.SH NAME
create_watchgroup - creates a StopWatch watch group

.SH SYNOPSIS
subroutine
.BI "create_watchgroup" "(watch, handle, err)"


.IP
type (watchtype), intent(IN) ::  watch
.IP OR
type (watchtype), intent(IN) ::  watch(:)


.IP
type (watchgroup), intent(OUT) ::  handle
.IP
integer, optional, intent(OUT) ::  err


.SH DESCRIPTION
Creates a new watch group and returns a handle for it.
A watch group must be created by this routine before it
is passed to any other StopWatch routines.  In Fortran
90 it is impossible to test whether or not a watch
group has been created, and using a watch group that
has not been created may cause the program to crash.
It is not an error to create a watch group that has
already been created, however the prior information and
memory locations will be lost.  Watch groups should be
destroyed (see
.BR "destroy_watchgroup" "(3))"
before they are recreated.  Also, local variable watch
groups should be destroyed before returning from a
subroutine, to avoid memory leaks.

One or more watches may be optionally specified.  If
.I watch
is present, the watch group will initially contain the
specified watch(es).  If
.I watch
is omitted, the watch group will initially be empty.
Watches can be added and removed from the group with
.B join_watchgroup
and
.B leave_watchgroup.
The argument
.I watch
can be a single variable of type
.I watchtype
(see
.BR "stopwatch" "(3))"
to start the group with one watch, or an array of type
.I watchtype
to start the group with several watches.

The argument
.I handle
is a variable of type
.I watchgroup
that will subsequently be used to access the watch
group.

.SH DIAGNOSTICS
If present, the optional intent OUT integer argument
.I err
returns a status code.  The code is the sum of the
values listed below.

An error message will be printed to a specified I/O
unit (unit 6 by default) if
.I print_errors
is TRUE (default is TRUE). The error message contains
more detail about the cause of the error than can be
obtained from just the status code, so you should set
.I print_errors
to TRUE if you have trouble determining the cause of
the error.

If
.I abort_errors
is TRUE (default is FALSE), the program will terminate
on an error condition.  Otherwise, the program will
continue execution but the watch group will not be
created.

See
.BR "option_stopwatch" "(3)"
for further information on
.I print_errors, abort_errors
and I/O units.

The relevant status codes and messages are:


.IP 0
No errors; execution successful.


.IP 1
Watch needs to be created.  This error occurs if you
attempt to put a watch that has been destroyed in the
group.  The watch must first be created again.  See
also the comment about watches that have never been
created in the BUGS section.


.IP 512
Failed to allocate required memory.  When a group is
created, memory is allocated for the group.  Also, when
.B create_watchgroup
is called with an array of watches, temporary memory is
allocated.  This error occurs if the Fortran
.B allocate
statement returns a nonzero status indicating that
memory could not be allocated.  Avoid memory leaks by
always destroying watches and groups before recreating
them, and destroying local variable watches and groups
before returning from a subroutine.


.IP 1024
Error occurred while deallocating memory.  This error
occurs if the Fortran
.B deallocate
statement returns a nonzero status while deallocating
temporary memory used for an array of watches.  The
group is created, but be aware that other problems
could develop as a result of the deallocate error.


.LP

.SH EXAMPLES
type (watchtype) w(3)
.br
type (watchgroup) g1, g2
.br
integer errcode

call create_watchgroup(handle=g1)
.br
call create_watchgroup(w, g2, err=errcode)

The first call creates an empty group
.I g1.
The second call creates the group
.I g2
with three watches, and returns a status code.

.SH BUGS
It cannot be determined whether or not a watch variable
has been created (passed as an argument to
.B create_watch).
If a watch that has never been created is passed into
.B create_watchgroup,
it might generate a Fortran error due to passing a
pointer with undefined association status to the
Fortran intrinsic function
.B associated.
However, some compilers will allow this as an extension
to the Fortran 90 standard and recognize that the
pointer is not associated, in which case the ``Watch
needs to be created'' error message is generated.

.SH AUTHOR
William F. Mitchell, william.mitchell@nist.gov
.br
National Institute of Standards and Technology


.SH SEE ALSO
stopwatch(3), create_watch(3), destroy_watchgroup(3),
destroy_watch(3), end_pause_watch(3),
inquiry_stopwatch(3), join_watchgroup(3),
leave_watchgroup(3), option_stopwatch(3),
pause_watch(3), print_watch(3), read_watch(3),
reset_watch(3), start_watch(3), stop_watch(3)
