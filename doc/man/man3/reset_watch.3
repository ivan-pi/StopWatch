.TH RESET_WATCH 3 "January 3, 1997" "StopWatch 1.0" "STOPWATCH PROCEDURES"
.PD 0.0v


.SH NAME
reset_watch - resets a StopWatch watch to 0.0

.SH SYNOPSIS
subroutine
.BI "reset_watch" "(watch, clock, err)"


.IP
type (watchtype), intent(IN) ::  watch
.IP OR
type (watchtype), intent(IN) ::  watch(:)
.IP OR
type (watchgroup), intent(IN) ::  watch


.IP
character(len=*), optional, intent(IN) ::  clock
.IP OR
character(len=*), intent(IN) ::  clock(:)


.IP
integer, optional, intent(OUT) ::  err


.SH DESCRIPTION
Resets the specified clocks of the specified watches to
0.  Clocks can be reset regardless of whether they are
running or not.

One or more watches must be specified.  The argument
.I watch
can be a single variable of type
.I watchtype
(see
.BR "stopwatch" "(3))"
to reset one watch, an array of type
.I watchtype
to reset several watches, or a variable of type
.I watchgroup
(see
.BR "stopwatch" "(3))"
to reset the watches in a group.

The optional argument
.I clock
specifies which clocks to reset on the specified
watch(es).  If omitted, the current default clocks (see
.BR "option_stopwatch" "(3))"
are reset.  If present,
.I clock
must be a character string containing 'cpu', 'user',
\'sys', or 'wall', or an array of such character
strings.

.SH DIAGNOSTICS
If present, the optional intent OUT integer argument
.I err
returns a status code.  The code is the sum of the
values listed below.

An error message will be printed to a specified I/O
unit (unit 6 by default) if
.I print_errors
is TRUE (default is TRUE). The error message contains
more detail about the cause of the error than can be
obtained from just the status code, so you should set
.I print_errors
to TRUE if you have trouble determining the cause of
the error.

If
.I abort_errors
is TRUE (default is FALSE), the program will terminate
on an error condition.  Otherwise, the program will
continue execution but the watch(es) will not be reset.

See
.BR "option_stopwatch" "(3)"
for further information on
.I print_errors, abort_errors
and I/O units.

The relevant status codes and messages are:


.IP 0
No errors; execution successful.


.IP 1
Watch needs to be created.  This error occurs if you
attempt to reset a watch that has been destroyed.  The
watch must first be created again.  See also the
comment about watches that have never been created in
the BUGS section.


.IP 2
Watch is in the wrong state for this operation.  This
occurs when you attempt to reset a watch that is
currently paused.


.IP 4
Watch is in an unknown state.  This occurs if StopWatch
does not recognize the state (running, stopped, etc.)
that the watch is in.  This error should not occur, and
indicates an internal bug in StopWatch.


.IP 8
Invalid clock type.  This occurs if
.I clock
is present and one of the specified clocks is not
supported by the implementation.  See
.BR "inquiry_stopwatch" "(3)"
to determine what clocks are available.


.IP 512
Failed to allocate required memory.  When
.B reset_watch
is called with an array or group of watches, temporary
memory is allocated.  This error occurs if the Fortran
.B allocate
statement returns a nonzero status indicating that
memory could not be allocated.  Avoid memory leaks by
always destroying watches and groups before recreating
them, and destroying local variable watches and groups
before returning from a subroutine.


.IP 1024
Error occurred while deallocating memory.  This error
occurs if the Fortran
.B deallocate
statement returns a nonzero status while deallocating
temporary memory used for an array or group of watches.
The watches are reset, but be aware that other problems
could develop as a result of the deallocate error.


.LP

In addition to the run time diagnostics generated by
StopWatch, the following problems may arise:


.IP o
In Fortran 90, the character strings in an array
constructor must all have the same length.  Pad three
letter clock names with a blank on the right to make a
four character string, for example, 'cpu '.


.SH EXAMPLES
type (watchtype) w1, w2(3)
.br
type (watchgroup) g1
.br
integer errcode

call reset_watch(w1)
.br
call reset_watch(w2, err=errcode)
.br
call reset_watch(g1, (/'cpu ', 'wall'/), errcode)

The first call resets the default clocks on a single
watch.  The second call resets the default clocks on
three watches given as an array and returns a status
code.  The third call resets the cpu and wall clocks on
the watches in the group
.I g1,
and returns a status code.

.SH BUGS
It cannot be determined whether or not a watch variable
or watch group has been created (passed as an argument
to
.B create_watch
or
.BR "create_watchgroup" ")."
If a watch or watch group that has never been created
is passed into
.B reset_watch,
it might generate a Fortran error due to passing a
pointer with undefined association status to the
Fortran intrinsic function
.B associated.
However, some compilers will allow this as an extension
to the Fortran 90 standard and recognize that the
pointer is not associated, in which case the ``Watch
needs to be created'' error message is generated.

.SH AUTHOR
William F. Mitchell, william.mitchell@nist.gov
.br
National Institute of Standards and Technology


.SH SEE ALSO
stopwatch(3), create_watchgroup(3), create_watch(3),
destroy_watchgroup(3), destroy_watch(3),
end_pause_watch(3), inquiry_stopwatch(3),
join_watchgroup(3), leave_watchgroup(3),
option_stopwatch(3), pause_watch(3), print_watch(3),
read_watch(3), start_watch(3), stop_watch(3)
